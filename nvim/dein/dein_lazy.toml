[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertcharPre'
hook_source = '''
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#auto_complete_delay_start_length = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#max_list = 10000


    inoremap <expr><TAB> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_event = 'InsertcharPre'
on_ft = 'snippet'
hook_source = '''
    " Plugin key-mappings.
    imap <C-k>          <Plug>(neosnippet_expand_or_jump)
    smap <C-k>          <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>          <Plug>(neosnippet_expand_target)
    
    " SuperTab
    imap <expr><TAB>
        \ pumvisible() ? "\<C-n>" :
        \neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
        set conceallevel=1 concealcursor=niv
    endif
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_ft = ['cpp', 'c']

hook_source = '''
    set hidden
    let g:LanguageClient_serverCommands = {
        \ 'cpp': ['clangd'],
        \ 'c': ['clangd'],
        \ }
    nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
    nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
    nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
    nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
    nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
    nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
    nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
    nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
    nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
    nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
'''
hook_post_update = '''
    if has('win32') || has('win64')
    call system(
            \ 'powershell -executionpolicy bypass -File install.ps1')
    else
    call system('bash install.sh')
    endif
'''
